#!/bin/bash
# dcm_version
# Display the actual version of DCM as pointed by $HOMEDCM
# display some revision information about this version
# class = @DCM core functions@

usage() {
   echo
   echo "USAGE : $(basename $0) [-h] "
   echo
   echo "  PURPOSE: "
   echo "     Display the actual version of DCM as pointed by \$HOMEDCM"
   echo "     Display additional revision information on the DCM components."
   echo
   echo "  ARGUMENTS:"
   echo "     none "
   echo
   echo "  OPTIONS:"
   echo "    -h : print this help message and exit."
   echo
   exit 0
        }
# function for text color
set_color() {
r="\033[31m"  # red
g="\033[32m"  # green
b="\033[34m"  # blue
m="\033[35m"  # magenta
k="\033[0m"   # black/reset
#
# more font effect
bld="\033[1m"
ita="\033[3m"
und="\033[4m"
str="\033[9m"
            }
# command parser
while getopts :h opt ; do
   case $opt in
     (h) usage ;;
     (*) usage ;;
    esac
done


export LANG=C  # for svn message to be parsed correctly
set_color
echo "========================================================="
printf " Actual $bld${r}DCM$k version is: $bld$r%s$k \n"  $( basename $(dirname $HOMEDCM ) )
echo 
printf "$g"
  echo " origin git repository : "
  cd $HOMEDCM
 git remote -v | grep fetch | awk '{print $2}'
printf "$k"
echo
printf "$m"
  echo -n " current branch: "
git branch |  grep \* | awk '{print $2}'
echo 

printf "$b" 
  echo " current commit:  "
git log  | head -4 | grep commit
git log  | head -4 | grep Date
  cd - > /dev/null 2>&1
printf "$k"
echo "========================================================="
echo
printf "Actual $bld${r}NEMOREF$k revision is : \n" 

cd $REFDIR
printf "$g"
  echo " origin git repository : "
 git remote -v | grep fetch | awk '{print $2}'
printf "$k"
echo
printf "$m"
  echo -n " current tag : "
git describe --exact-match --tags $(git log -n1 --pretty='%h') 2> /dev/null
echo
#git tag
  echo -n " current branch: "
git branch |  grep \* 
echo 

printf "$b" 
  echo " current commit:  "
git log | head -4 | grep commit
git log | head -4 | grep Date
cd - > /dev/null 2>&1
printf "$k"

# check that current commit of NEMO4 is in phase with DCM
# Since NEMO is distributed on gitlab (starting 4.2.0), we have to give the specific commit (hash) in getnemoref
# in order to fix the state of NEMOREF, in phase with DCM at a given time.
# We use this information, written in getnemoref to check if the NEMO4 repository is the good one.
requested_commit=$( cat $HOMEDCM/NEMOREF/getnemoref.sh  | grep 'commit=' | tail -1 | awk -F= '{print $2}' )
actual_commit=$( cd $HOMEDCM/NEMOREF/NEMO4 ; git log | grep commit | head -1 | awk '{print $2}' )

if [ $requested_commit != $actual_commit ] ; then
  printf "$bld$r WARNING: Actual NEMO4 commit is not in phase with DCM $k \n"
  printf "$bld$r          Actual NEMO4 commit should be ${requested_commit:0:7} $k \n"
  printf "$b        (using getnetmoref.sh does the job) $k \n"
else 
  printf "$g   ** GOOD!: You are using the right NEMO4 commit ( ${requested_commit:0:7} ) **   $k \n"
fi
